üî• Semana 1 ‚Äì Fundamentos L√≥gicos
Objetivo: fortalecer condicionales, bucles y operaciones b√°sicas.
D√≠a	Ejercicio	Enfoque
1	FizzBuzz	Condicionales
2	Invertir una cadena	Strings y bucles
3	Pal√≠ndromo	L√≥gica booleana
4	Contar vocales y consonantes	Recorrido de strings
5	N√∫meros primos entre 1 y N	L√≥gica matem√°tica
6	Sumar d√≠gitos de un n√∫mero (ej. 123 = 6)	Divisi√≥n y m√≥dulo
7	Factorial recursivo y no recursivo	Recursividad b√°sica

üî• Semana 2 ‚Äì Arrays y l√≥gica intermedia
Objetivo: manipular colecciones y usar l√≥gica m√°s compleja.
D√≠a	Ejercicio	Enfoque
1	Encontrar el n√∫mero m√°s grande de un array	B√∫squeda
2	Eliminar duplicados de un array	Set / l√≥gica
3	Ordenar array manualmente (Bubble sort)	Algoritmo simple
4	Detectar n√∫meros repetidos en un array	Contadores / hash
5	Encontrar el n√∫mero que m√°s se repite en un array	Frecuencia
6	Sumar elementos de un array con reduce	Programaci√≥n funcional
7	Validar si dos palabras son anagramas	Ordenamiento / strings


üî• Semana 3 ‚Äì Objetos, strings avanzadas y l√≥gica combinatoria
Objetivo: manejar estructuras de datos y l√≥gica de combinaci√≥n.
D√≠a	Ejercicio	Enfoque
1	Contar ocurrencias de letras en una frase	Mapas / objetos
2	Reemplazar palabras en una frase (como un mini-filtro)	Manipulaci√≥n de texto
3	Generar todas las combinaciones de una palabra corta	Recursividad / l√≥gica
4	Revertir palabras en una frase sin alterar el orden	Dividir / unir strings
5	Validar si una cadena tiene par√©ntesis balanceados	Stack / l√≥gica de pila
6	Mini buscador: buscar una palabra en un texto largo	Includes / l√≥gica b√°sica
7	Mini login: comparar input de usuario con una "DB" mock	Condicionales + objetos

üî• Semana 4 ‚Äì Desaf√≠os tipo entrevista
Objetivo: fortalecer estructuras mentales y resoluci√≥n eficiente.
D√≠a	Ejercicio	Enfoque
1	B√∫squeda binaria (iterativa y recursiva)	Algoritmos
2	Implementar una pila (push, pop, peek) con array	Estructuras de datos
3	Simular un historial de navegaci√≥n con dos pilas	L√≥gica + estructuras
4	Detectar si hay ciclo en un array (como fast/slow pointer)	Punteros / l√≥gica
5	Merge de dos arrays ordenados en uno solo	Eficiencia
6	Algoritmo de ordenamiento (QuickSort o MergeSort)	Recursividad + orden
7	Crear un validador de brackets con m√∫ltiples tipos ({[()]})	Stack avanzado